{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","onClick","minus","index","count","plus","delete","reset","App","useState","counters","setCounters","plusOne","newCountersPlus","minusOne","newCountersMinus","deleteCurrent","arr","filter","el","i","resetCurrent","arr1","map","className","key","r","Math","round","random","lastIndex","length","slice","arr2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAgBeA,MAbf,SAAiBC,GACb,OACI,6BAEI,4BAAQC,QAAS,kBAAMD,EAAME,MAAMF,EAAMG,SAAzC,KACCH,EAAMI,MACP,4BAAQH,QAAS,kBAAMD,EAAMK,KAAKL,EAAMG,SAAxC,KACA,4BAAQF,QAAS,kBAAMD,EAAMM,OAAON,EAAMG,SAA1C,KACA,4BAAQF,QAAS,kBAAMD,EAAMO,MAAMP,EAAMG,SAAzC,OCyDGK,MAjEf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,KAgBLC,EAAU,SAACT,GACb,IAAMU,EAAe,YAAOH,GAC5BG,EAAgBV,KAChBQ,EAAYE,IAEVC,EAAW,SAACX,GACd,IAAMY,EAAgB,YAAOL,GAC7BK,EAAiBZ,KACjBQ,EAAYI,IAEVC,EAAgB,SAACb,GAInB,IAAMc,EAAMP,EAASQ,QAAO,SAACC,EAAIC,GAAL,OAAWA,IAAMjB,KAC7CQ,EAAYM,IAEVI,EAAe,SAAClB,GAClB,IAAMmB,EAAOZ,EAASa,KAAI,SAACJ,EAAIC,GAAL,OAAYA,IAAMjB,EAAS,EAAIgB,KACzDR,EAAYW,IAQhB,OACI,yBAAKE,UAAU,OACX,6BACA,qDACA,6BACA,6BACCd,EAASa,KAAI,SAACJ,EAAIC,GAAL,OACV,kBAAC,EAAD,CAAShB,MAAOe,EAAIM,IAAKL,EAAGjB,MAAOiB,EAAGf,KAAMO,EACnCV,MAAOY,EAAUR,OAAQU,EAAeT,MAAOc,OAG5D,6BACA,4BAAQpB,QAnDG,WACf,IAAMyB,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BlB,EAAY,GAAD,mBAAKD,GAAL,CAAegB,OAiDtB,eACA,4BAAQzB,QA/CM,WAClB,IAAM6B,EAAYpB,EAASqB,OAAS,EACpCpB,EAAYD,EAASsB,MAAM,EAAGF,MA6C1B,kBACA,6BACA,4BAAQ7B,QApBC,WACb,IAAMgC,EAAOvB,EAASa,KAAI,SAAAJ,GAAE,OAAI,KAChCR,EAAYsB,KAkBR,aACA,4BAAQhC,QA9CE,WACdU,EAAY,MA6CR,gBClDQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ab06b3cf.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Counter(props) {\n    return (\n        <div>\n            {/*({props.index})*/}\n            <button onClick={() => props.minus(props.index)}>-</button>\n            {props.count}\n            <button onClick={() => props.plus(props.index)}>+</button>\n            <button onClick={() => props.delete(props.index)}>x</button>\n            <button onClick={() => props.reset(props.index)}>o</button>\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\n\nfunction App() {\n    const [counters, setCounters] = useState([]);\n\n\n    const addCounter = () => {\n        const r = Math.round(Math.random() * 10);\n        setCounters([...counters, r])\n\n    }\n    const deleteCounter = () => {\n        const lastIndex = counters.length - 1;\n        setCounters(counters.slice(0, lastIndex));\n    }\n    const deleteAll = () => {\n        setCounters([])\n    }\n    const plusOne = (index) => {\n        const newCountersPlus = [...counters];\n        newCountersPlus[index]++;\n        setCounters(newCountersPlus);\n    }\n    const minusOne = (index) => {\n        const newCountersMinus = [...counters];\n        newCountersMinus[index]--;\n        setCounters(newCountersMinus);\n    }\n    const deleteCurrent = (index) => {\n        // const arr1 = counters.slice(0, index);\n        // const arr2 = counters.slice(index+1, counters.length-1);\n        //setCounters([...arr1, ...arr2]);\n        const arr = counters.filter((el, i) => i !== index)\n        setCounters(arr);\n    }\n    const resetCurrent = (index) => {\n        const arr1 = counters.map((el, i) => (i === index) ? 0 : el)\n        setCounters(arr1);\n    }\n\n    const resetAll = () => {\n        const arr2 = counters.map(el => 0);\n        setCounters(arr2);\n    }\n\n    return (\n        <div className=\"App\">\n            <br/>\n            <strong>C O U N T E R - 3</strong>\n            <br/>\n            <hr/>\n            {counters.map((el, i) => (\n                <Counter count={el} key={i} index={i} plus={plusOne}\n                         minus={minusOne} delete={deleteCurrent} reset={resetCurrent}/>\n            ))}\n\n            <br/>\n            <button onClick={addCounter}>Add Counter</button>\n            <button onClick={deleteCounter}>Delete Counter</button>\n            <br/>\n            <button onClick={resetAll}>Reset All</button>\n            <button onClick={deleteAll}>Delete All</button>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}